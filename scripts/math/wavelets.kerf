HighPass2: {[x] { reverse(pow(-1,range(0,len(x))) * x)}}  // why doesn't this work? 
HighPass: {[x] reverse x * (-1)**range(0,len(x))}
// drot =:  ((i.(#y)) +/ (0,((_1 * #y) + }.i.(#{.x)))) { y'  
Drot: {[x, y] range(count(y)) +/  (0,(-1 * count(y)) + INSERTVB range(count(x)) car take y)}
//  13 : '|: |. ((2 %~ (#x)),2) $ |. y'  
filtRot: {[x, y] transpose reverse (count(x))  }
// 13 : ' (2 # (x drot y)) * ((2*#y)$x)'
reducer: {[x, y] (flatten transpose drot(x y)) * repeat((2 * count y),x) }
// oddx=: ] {~ ([: (] #~ 0 1 $~ #) [: i. [: # ]) -/ [: i. [: # [
oddx: {[x, y] x} //todo

function dwt(x,y) {
lpf: wdict x
hpf: HighPass lpf
yvals: oddx hpf y
level: yvals mmul hpf
wav: yvals mmul lpf
{wav:wav,lvl:level}
}

function idwt(x,y) {
wv: y['wav']
yl: y['lvl']
+/ reducer(lpf yl) + reducer(hpf wv)
}

def mp(x,y) {
dot(x,y) \>
}

def dot(x,y) {
sum x * y
}


wdict: {
  haar: 0.707107 0.707107,
  w4: -0.125 0.375 -0.375 0.125,
  mb4: 0.4801755 0.8372545 0.2269312 -0.1301477,
  mb8: -0.1673619 0.01847751 0.5725771 0.7351331 0.2947855 -0.1108673 0.007106015 0.06436345,
  mb16:-0.0130277 0.02173677 0.1136116 -0.0577657 -0.2278359 0.1188725 0.6349228 0.6701646 0.2345342 -0.05656657 -0.01987986 0.05474628 -0.02483876 -0.04984698 0.009620427 0.005765899,
  mb24: -2.132706e-05 0.0004745736 0.0007456041 -0.004879053 -0.001482995 0.04199576 -0.002658282 -0.006559513 0.1019512 0.1689456 0.1243531 0.1949147 0.4581101 0.6176385 0.2556731 -0.3091111 -0.3622424 -0.004575448 0.1479342 0.01027154 -0.01644859 -0.002062335 0.001193006 5.361301e-05,
  db4: 0.482962913144534 0.836516303737808 0.224143868042013  -0.12940952255126,
  db6: 0.332670552950083 0.806891509311093 0.459877502118491 -0.135011020010255 -0.0854412738820267 0.0352262918857096,
  db8: 0.230377813307443 0.714846570548406 0.630880767935879 -0.0279837694166834 -0.187034811717913 0.0308413818353661 0.0328830116666778 -0.0105974017850021,
  db16: 0.0544158422431049 0.312871590914303 0.67563073629729 0.585354683654191 -0.0158291052563816 -0.28401554296157 0.0004724845739124 0.128747426620484 -0.0173693010018083 -0.0440882539307952 0.0139810279173995 0.0087460940474061 -0.0048703529934518 -0.000391740373377 0.0006754494064506 -0.0001174767841248,
  fk4: 0.653927555569765 0.753272492839487 0.0531792287790598 -0.0461657148152177,
  fk6: 0.42791503242231 0.812919643136907 0.356369511070187 -0.146438681272577 -0.0771777574069701 0.0406258144232379,
  fk8: 0.3492381118638 0.782683620384065 0.475265135079471 -0.0996833284505732 -0.15997809743403 0.0431066681065162 0.0425816316775818 -0.0190001788537359,
  fk14: 0.260371769291396 0.686891477239599 0.611554653959511 0.0514216541421191 -0.245613928162192 -0.0485753390858553 0.124282560921513 0.0222267396224631 -0.0639973730391417 -0.00507437254997285 0.029779711590379 -0.00329747915270872 -0.00927061337444824 0.00351410097043596,
  la8: -0.0757657147893567 -0.0296355276459604 0.497618667632563 0.803738751805386 0.297857795605605 -0.0992195435769564 -0.0126039672622638 0.0322231006040782,
  la16: 0.0544158422431049 0.312871590914303 0.67563073629729 0.585354683654191 -0.0158291052563816 -0.28401554296157 0.0004724845739124 0.128747426620484 -0.0173693010018083 -0.0440882539307952 0.0139810279173995 0.0087460940474061 -0.0048703529934518 -0.000391740373377 0.0006754494064506  -0.0001174767841248,
  la20: 0.000770159809103 9.56326707837e-05 -0.0086412992759401 -0.0014653825833465 0.0459272392237649 0.0116098939129724 -0.159494278857531 -0.0708805358108615 0.471690666842659 0.769510037014339 0.383826761225382 -0.0355367403054689 -0.0319900568281631 0.049994972079156 0.0057649120455518 -0.020354939803946 -0.000804358934537 0.0045931735836703 5.7036084339e-05 -0.0004593294205481,
}       


def dot(x,y) {
  +/(transpose x)*y
}
a dot b
r: m1 dot/:\: +m2  / dot product with the transpose.


a: [[1 2], [3 4]]
b: [[5 6], [7 8]]

c: [[1 2 3],[4 5 6], [7 8 9]]

minv([1 2, 3 4]) - [-2 1, 1.5 -0.5]

  a:[1 2, 3 4]; b:[5 6, 7 8]; a mmul b
[19 22, 43 50]
  a:[1 2 3, 4 5 6]; b:[7 8, 9 10, 11 12]; a mmul b
[58 64, 139 154]
  TEST_EQUAL("a: [6 2, 2 3]; b: 22 10; sum(abs minus(lsq(a,b), [23/7, 8/7])) < pow(10, -9)","1");
  TEST_EQUAL("a: [6 2, 2 3]; b: 22 10; sum(abs minus(    a\\b, [23/7, 8/7])) < pow(10, -9)","1");
  TEST_EQUAL("pow(10, -9) > sum fold minv([1 2, 3 4]) - [-2 1, 1.5 -0.5]", "1");